<?xml version="1.0"?>

<!-- TODO description element should get childs for all languages iso attributes -->

<commands>

  <command name="set-working-context" alias="sw">

    <description lang="en">Sets or changes the current working context.</description>

    <options>
      <option opt="w" longOpt="working-context" hasArgs="true" required="true" description="The name of the working context">
        <arg>working-context</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.cli.cmd.SetWorkingContext</classname>

    <help lang="en">
      Sets or changes the working context reference in the user preferences (.java/preferences). The
      'karma.working-context' property is checked each time karma is started. Starting Karma with
      `karma -w &lt;working-context&gt;` has the same effect as this command.
    </help>

  </command>



  <command name="start-work" alias="start">

    <description lang="en">Changes a modules' state to WORKING.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.cli.cmd.StartWorkImpl</classname>

    <help lang="en">
      Changes a modules' state to WORKING. When the manifest is a release manifest, a patchline is created
      for the current module version.
    </help>

  </command>



  <command name="stop-work" alias="stop">
    <description lang="en">Changes a modules' state to DYNAMIC or STATIC</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.cli.cmd.StopWorkImpl</classname>

    <help lang="en">
      Changes a modules' state. When the manifest is a development manifest, the state is changed to
      DYNAMIC. If the manifest is a release manifest, the state is changed to STATIC.
    </help>
  </command>



  <command name="update-module" alias="um">
    <description lang="en">Update a module from the vcs.</description>
    <options>
      <option opt="m" longOpt="module-name" hasArgs="true" required="true" description="The module name that should be updated">
        <arg>module-name</arg>
      </option>
      <option opt="v" longOpt="version" hasArgs="true" required="false" description="A specific version">
        <arg>version-number</arg>
      </option>
    </options>
    <classname>nl.toolforge.karma.cli.cmd.UpdateModuleImpl</classname>
    <help lang="en">
			The update command updates a module on a developer's local disk. Optionally, a version-number
			can be provided, to update to a specific version. The version-number must comply to the pattern
			rules for version numbers as defined by ...
    </help>
  </command>



  <command name="update-all-modules" alias="uam">
    <description lang="en">Updates all modules of the active manifest.</description>
    <classname>nl.toolforge.karma.cli.cmd.UpdateAllModulesImpl</classname>
    <help lang="en"/>
  </command>



  <command name="view-manifest" alias="vm dir ls">
    <description lang="en">Views the active manifest.</description>
    <classname>nl.toolforge.karma.cli.cmd.ViewManifestImpl</classname>
    <help lang="en">
			This command shows the status of the current manifest.
    </help>
  </command>



  <command name="view-module-history" alias="vmh">
    <description lang="en">Shows the module's history.</description>
    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="A module from the current manifest">
        <arg>module-name</arg>
      </option>
    </options>
    <classname>nl.toolforge.karma.cli.cmd.ViewModuleHistory</classname>
    <help lang="en"/>
  </command>



  <command name="promote-module" alias="prm">

    <description lang="en">Promotes a module to the next version.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
      <option opt="c" longOpt="comment" hasArgs="true" required="true" description="The developer's comment">
        <arg>comment</arg>
      </option>
      <option opt="v" longOpt="version" hasArgs="true" required="false" description="The new version number for the module">
        <arg>new-version</arg>
      </option>
      <option opt="f" longOpt="force" hasArgs="false" required="false" description="Promote with uncommitted work as well"/>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.PromoteCommand</classname>

    <help lang="en">
      Promoting a module is
    </help>

  </command>



  <command name="select-manifest" alias="slm">

    <description lang="en">Activates the given manifest.</description>

    <options>
      <option opt="m" longOpt="manifest" hasArgs="true" required="true" description="The manifest name">
        <arg>manifest-name</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.cli.cmd.SelectManifestImpl</classname>

    <help lang="en">

    </help>
  </command>



  <command name="list-manifests" alias="lm">

    <description>Shows all manifests.</description>

    <classname>nl.toolforge.karma.cli.cmd.ListManifestsImpl</classname>

    <help lang="en">
			There is a central repository (generally maintained in a version control system), which contains all the
			available manifests. This repository is configured in the builder.properties file. There
			can be only one such a repository configured in the builder. With the update-manifests command manifests
			are downloaded from the manifest repository and put on the local file system. The list-manifests command
			lists these local manifests. Only these manifests are available for the Karma runtime.
    </help>

  </command>



  <command name="quit" alias="q exit bye later mzl :wq :q">

    <description lang="en">Exit the great Karma environment.</description>

    <classname>nl.toolforge.karma.cli.cmd.ExitCleanImpl</classname>

    <help lang="en">
      Quits Karma. You don't want to, but sometimes you have to (it's just like Windows).
    </help>

  </command>



  <command name="help" alias="?">
    <description lang="en">Tells you about all commands.</description>
    <options>
      <option opt="c" longOpt="command-name" hasArgs="true" required="false" description="The command name">
        <arg>command-name</arg>
      </option>
    </options>
    <classname>nl.toolforge.karma.cli.cmd.HelpImpl</classname>
    <help lang="en">
      Shows help information, either for all commands or for one command.
    </help>
  </command>

</commands>

