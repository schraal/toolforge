*** D I V I D E  A N D  C O N Q U E R ***



W E L C O M E  T O  K A R M A !!
===============================================================================

This is the first BETA version of Karma, the tool-to-be for software
configuration management.

Sit back and relax, this is NOT Windows, and will not take forever to
install; a mere 15 seconds is all.

I N S T A L L A T I O N
===============================================================================

For now, we assume you have JDK1.4.2_xx installed and an environment
variable JAVA_HOME set. In later versions, we'll package the JRE as well.

After installation :

- Set your KARMA_HOME environment variable to where you installed Karma.

- Add $KARMA_HOME/bin to you PATH and make sure your new PATH settings are
  activated.

** IMPORTANT **

- if you are new to Karma, read the 'Admin Section' first, then continue
  with the next step.

- Start Karma (linux/unix : 'karma', Windows : 'karma.bat'). You might have to
  set some execution flags on some operating systems. There's a bug (I think)
  in the IzPack tool that prevents our installation script from setting this
  flag automatically. Hopefully we'll fix that later on.

- Following the instructions. You will be walked through a few configuration
  items to enable Karma to find manifests and locations. This is all CVS
  stuff, so you should be able to deduct what is meant here.


A D M I N  S E C T I O N
===============================================================================

Some basic setup has to be performed by yourself (or your administrator) before
Karma can be usefull to you.

1. Software modules are grouped in a so-called manifests. These manifests are
   xml files, following the

   http://www.toolforge.org/specifications/karma/manifest.dtd

   definition. Karma is capable of checking out these manifest files from a
   (CVS) repository. The local checkout of this module (which must be named :
   manifests) is called the 'manifest-store'. During startup of Karma, the
   manifest-store configuration will be checked and asked for if missing. You
   have to provide these properties to Karma which will be written in
   $USER_HOME/.karma/<working-context>/workingcontext.properties. A local CVS
   repository works as well.

   Create a file 'helloworld.xml' and add it to your 'manifest' module in the
   CVS repository :

   _____________________________________________________________________________

   <?xml version="1.0"?>

   <manifest name="helloworld" type="development" version="1-0">

     <modules name="helloworld" type="src" location="local"/>

   </manifest>

   _____________________________________________________________________________

2. Each module has a location. Right now, all modules have a location identifying
   a CVS repository. Locations are configured in xml files, following the

   http://www.toolforge.org/specifications/karma/location.dtd

   definition. Karma is capable of checking out these location files from a (CVS)
   repository. The local checkout of this module (which must be named :
   locations) is called the 'location-store'. During startup of Karma, the
   location-store configuration will be checked and asked for if missing. You
   have to provide these properties to Karma which will be written in
   $USER_HOME/.karma/<working-context>/workingcontext.properties. A local CVS
   repository works as well.

   The following could be your starter location ...

   Create a file 'locations.xml' and add it to your 'locations' module in the
   CVS repository :

   _____________________________________________________________________________

   <?xml version="1.0"?>

   <locations>

     <location type="cvs-repository" id="local">
       <protocol>local</protocol>
       <host>localhost</host>
       <port>2401</port>
       <repository>/home/cvs</repository>
     </location>

   </locations>

   _____________________________________________________________________________

   The mapping between the manifest and the location is made via 'id="local"'.


3. Version control repositories, such as CVS, can be behind an authentication
   layer. If so, you will need a username and password. Karma maps each location
   to authentication data. This authentication data is (Karma R1.0) required to
   be in a file called $USER_HOME/.cvspass. If you have ever used CVS
   command-line tools, you might have it on your system already. For each
   location (a CVS location will create a CVSROOT from it), a line should be
   created in the .cvspass file. This includes the location configuration for
   the manifest-store and the location-store. A general .cvspass file looks
   like:

   /1 :pserver:asmedes@cvs.toolforge.nl:2401/cvs/karma B$%< er_9
   /1 :pserver:asmedes@cvs.toolforge.nl:2418/cvs/cli B$%< er_9

   The scrambled password is stored in this file as well. Ask your
   administrator (or send us an email support@toolforge.org for more info if
   you haven't got a clue...).

   The authentication data that Karma requires has to be available in
   $USER_HOME/.karma, in a file called 'authenticators.xml'. The following
   snippet shows the 'authenticators.xml' that maps to the location you
   configured above :

   _____________________________________________________________________________

   <?xml version="1.0"?>

   <authenticators>
     <authenticator id="local" username="asmedes"/>
   </authenticators>

   _____________________________________________________________________________

   Note that 'asmedes' is the username in the CVS repository, although it is not
   required for a CVS repository that is local (the :local: protocol), Karma
   still needs it to be maintain history.




Well, that's it for now. This README file is available after installation for
further reference.

Enjoy !