<?xml version="1.0"?>

<document>

  <properties>
    <title>Toolforge</title>
    <author email="d.a.smedes@toolforge.net">Arjen Smedes</author>
  </properties>

  <body>

  <section name="Manifest; commercial versions">

  <p>
    Many software products are released to the market under a commercial version number. Examples are numerous:
    <code>Oracle 8i</code>, <code>J2SE 1.5.0 beta 1</code> to name a few. Especially the first example shows a
    situation whereby the version number (<code>8i</code>) has a deep commercial meaning. All products in the suite
    are consolidated into one version number: <code>8i</code>.
  </p>

  <p>
    Karma uses the same concept, or rather, promotes it. For manifests delivering software products to a client, it is
    wise to choose a name with a commercial version number. Suppose your development department is to develop a software
    product called <code>Rose</code> for a client. A typical manifest name would be <code>rose_1-0</code>. The version
    indicator in the manifest is not managed at all by Karma. It is solely to the project to determine the name of the
    manifest, yet it is recommended to use a commercial version number, because clients (as well as you) relate to it.
  </p>

  </section>

  <section name="Versions, versions, versions">

  <p>
    Karma modules are version managed for you. A consistent version numbering scheme adds to the quality of the
    software development process at hand. Modules can only be managed by Karma when certain  rules are applied to the
    version numbers that may exist.
  </p>

  <p>
    Here's the Karma logic: 
  </p>

  <p>
    A version number can consist of three digits, separated by a separator character. In the current release of Karma
    (2-0), this separator char is an underscore ('<code>_</code>'). Each digit has a certain meaning in the software
    development process that is supported by Karma.
  </p>

  <table>
    <tr>
      <th>Digit</th>
      <th>Meaning</th>
    </tr>
    <tr>
      <td><b>Major</b> version number</td>
      <td>
        The major version number is used when the module reflects major changes (who would have thought that ...),
        such as interface changes. It is never automatically incremented by Karma when a module is promoted, but
        needs to be triggered by the <code>release</code>-command.
      </td>
    </tr>
    <tr>
      <td><b>Minor</b> version number</td>
      <td>
        Minor versions are incremented through the <code>promote</code>-command and indicate a certain stability in the
        modules' codebase.
      </td>
    </tr>
    <tr>
      <td><b>Patch number</b></td>
      <td>
        Patches are created when the module has been released (which is after the <code>release</code>-command. For
        example, a module can be patched when it has been released to the test department or when it has been released
        for production.
        <br/><br/>
        Karma creates a patchline for a module when the module is in <code>STATIC</code>-state and the developer
        applies the <code>start-work</code>-command.
      </td>
    </tr>
  </table>

  <p>Other version numbering schemes will be supported in the future.</p>

  </section>

  <section name="Development Lines">


  </section>


  </body>

</document>