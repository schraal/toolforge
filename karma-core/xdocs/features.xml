<?xml version="1.0"?>

<document>

  <properties>
    <title>Toolforge</title>
    <author email="w.h.schraal@toolforge.nl">Hilbert Schraal</author>
  </properties>

  <body>

  <section name="Features of Toolforge">

  <p>
   This page describes the features of Karma. The first section defines the features that
   are implemented in version 1.0 of Karma. The second section lists the features for later
   versions.
  </p>

  </section>

  <section name="Version 1.0 features and requirements.">

  <p>
    The following features are included in release 1.0 of Karma:
    <ul>
      <li>
        <b>Manifest support:</b> Manifests define a component or application. A manifest consists
        of one or more modules or sub-manifests.
      </li>
      <li>
        <b>Module support:</b> Modules is the smallest component Karma knows about. A module either forms
        a logical collection of sources or a library. Karma offers version management and state management
        on module level.
      </li>
      <li>
        <b>Version management:</b> Karma offers <a href='version-management.html'>version management</a> on module level. A module can be included
        in a manifest either as a dynamic module, which means that the manifest always includes the latest stable
        version of this module, or as a static module, which means that a fixed version of the module is included.
        Upgrading a module to a new stable version is standard functionality of Karma.
      </li>
      <li>
        <b>State management:</b> A module can exist in different <a href='state-management.html'>states</a>.
        Switching between states is done using the commands of Karma. The states prevent a developer from editing
        modules which he did not want to edit.
      </li>
      <li>
        <b>VCS support:</b> The first version of Karma offers support for CVS. However, the architecture
        of Karma is ready for support of other VCS-es like Subversion, ClearCase, Perforce, etc.
      </li>
      <li>
        <b>Build support:</b> Karma offers support for building a manifest. When all modules are defined
        using the Karma standard, then they will be picked up automatically in the build system.
        The build system delivers a runnable application or binary module.
        Currently, Karma uses Maven as the underlying build system.
      </li>
    </ul>
  </p>

  <p>
    The following requirements need to be met before an (official) release of Karma can be made:
    <ul>
      <li>
        The code has reached the <b>beta</b> stage, i.e. no functional changes are expected.
      </li>
      <li>
        Karma is self-hosted, i.e. the sources of Karma or managed and built using Karma.
      </li>
      <li>
        A user guide is available, which makes it possible to get a good overview of Karma within one hour.
      </li>
      <li>
        The installation of Karma has to be dead simple. It has to run 'out-of-the-box'.
      </li>
      <li>
        Good quality unit tests need to be present. The coverage has to be as high as 80%, minimum.
      </li>
      <li>
        ...
      </li>
    </ul>
  </p>


  </section>

  <section name="Future version features and requirements.">
  <p>
    The following features are planned for future releases:
    <ul>
      <li>
        <b>VCS support:</b> support for more VCS-es, like Subversion, ClearCase, Perforce, etc.
      </li>
    </ul>
  </p>
  </section>

  </body>

</document>
