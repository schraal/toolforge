<?xml version="1.0" encoding="UTF-8"?>

<project name="karma" default="none">

  <target name="none">

    <!-- Nothing -->

  </target>

  <target name="init-build-dir">

    <!-- '${module-build-dir}' maps to ${development.home}/<manifest-name>/build/<module-name>-->
    <mkdir dir="${module-build-dir}"/>

  </target>

  <!-- ************************ -->
  <!-- build-module (bm)        -->
  <!-- ************************ -->

  <target name="build-module" depends="init-build-dir">

    <!-- '${module-build-dir}' maps to ${development.home}/<manifest-name>/build/<module-name>-->
    <!-- '${module-source-dir}' maps to ${development.home}/<manifest-name>/<module-name>/src/java-->
    <!-- '${compile-classpath}' is determined by Module.getDependencies -->

    <mkdir dir="${module-build-dir}/${module-compile-dir}"/>

    <delete dir="${module-build-dir}" includes="*.jar"/>

    <javac
      destdir="${module-build-dir}/${module-compile-dir}"
      classpath="${module-classpath}"
      source="1.4"
      includes="**/*.java"
      compiler="modern">

      <src path="${module-source-dir}"/>

    </javac>

  </target>

  <!-- ************************ -->
  <!-- test-module (tm)        -->
  <!-- ************************ -->

  <target name="test-module" depends="init-build-dir">

    <!-- '${module-build-dir}' maps to ${development.home}/<manifest-name>/build/<module-name>-->
    <!-- '${module-source-dir}' maps to ${development.home}/<manifest-name>/<module-name>/src/java-->
    <!-- '${compile-classpath}' is determined by Module.getDependencies -->

    <mkdir dir="${module-build-dir}/${module-compile-dir}/xml"/>

    <javac destdir="${module-build-dir}/${module-compile-dir}" srcdir="${module-source-dir}" classpath="${module-classpath}"/>

    <junit
      printsummary="no"
      showoutput="yes"
      fork="no"
      errorproperty="unittestsfailed"
      failureproperty="unittestsfailed"
      reloading="false">

      <classpath>
        <pathelement path="${module-classpath}"/>
      </classpath>

      <formatter type="xml"/>

      <batchtest todir="${module-build-dir}/${module-compile-dir}/xml">
        <fileset dir="${module-build-dir}/${module-compile-dir}">
          <include name="**/Test*.class"/>
          <exclude name=""/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <!-- *************************************** -->
  <!-- package-module (pa); resulting in a jar -->
  <!-- *************************************** -->

  <target name="package-module-as-jar" depends="init-build-dir">

    <!-- Remove all jar-files -->
    <delete dir="${module-build-dir}" includes="*.jar"/>

    <echo message="${module-build-dir}, ${module-base-dir}, ${module-includes}"/>

    <copy todir="${module-build-dir}" overwrite="true">
      <fileset dir="${module-base-dir}" includes="${module-includes}"/>
    </copy>

    <jar
      destfile="${module-package-name}"
      basedir="${module-build-dir}"
      excludes="${module-excludes}"
      />

  </target>

  <!-- *************************************** -->
  <!-- package-module (pa); resulting in a war -->
  <!-- *************************************** -->

  <target name="package-module-as-war" depends="init-build-dir">

    <delete>
      <fileset dir="${module-build-dir}" includes="*.war"/>
    </delete>

    <echo message="1"/>

    <copy todir="${module-build-dir}" overwrite="true">
      <fileset dir="${module-base-dir}" includes="${module-includes}"/>
    </copy>

    <echo message="2"/>

    <!-- For standalone wars, all deps are copied to WEB-INF/lib and packaged as such.-->

    <delete quiet="yes" >
      <fileset dir="${module-build-dir}/WEB-INF/lib" includes="**"/>
    </delete>

    <echo message="3"/>

    <copy todir="${module-build-dir}/WEB-INF/lib" flatten="yes" >
      <!-- Module dependencies, appear as <dependency module=""/> -->
      <fileset dir="${manifest-build-dir}" includes="${module-module-dependencies}"/>
      <!-- Jar dependencies, from the jar-repository -->
      <fileset dir="${karma-jar-repository}" includes="${module-jar-dependencies}"/>
    </copy>

    <echo message="4"/>

    <!-- Package the module -->

    <war destfile="${module-package-name}" basedir="${module-build-dir}" webxml="${module-webxml}"/>

  </target>

  <!-- *************************************** -->
  <!-- package-module (pa); resulting in an ear -->
  <!-- *************************************** -->

  <target name="package-module-as-ear" depends="init-build-dir">

    <delete dir="${module-build-dir}" includes="*.ear;archives.*"/>

    <!-- copy the eapp stuff, while replacing module ids in application.xml -->
    <copy todir="${module-build-dir}" overwrite="true">
      <fileset dir="${module-base-dir}" includes="${module-includes}"/>
      <filterset>
        <filtersfile file="${module-build-dir}/archives.properties"/>
      </filterset>
    </copy>

    <!-- copy the external jars and wars-->
    <copy todir="${module-build-dir}" flatten="yes">
      <fileset dir="${module-build-dir}/.." includesfile="${module-build-dir}/archives.includes"/>
    </copy>

    <ear
      destfile="${module-package-name}"
      basedir="${module-build-dir}"
      appxml="${module-appxml}"
      excludes="${module-excludes}"
      />

  </target>

</project>