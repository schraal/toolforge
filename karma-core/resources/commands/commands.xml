<?xml version="1.0"?>

<!-- TODO description element should get childs for all languages iso attributes -->

<commands>

  <command name="set-working-context" alias="sw">

    <description lang="en">descp</description>

    <options>
      <option opt="w" longOpt="working-context" hasArgs="true" required="true" description="The name of the working context">
        <arg>working-context</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.cli.cmd.SetWorkingContext</classname>

    <help lang="en">
      Stores another working context reference in the user preferences (.java/preferences). This working context is only
      used by the command-line-interface toolie and is ignored by the console.
    </help>

  </command>

  <command name="create-release-manifest" alias="cr">
    <description lang="en">Creates a release manifest.</description>

    <options>
      <option opt="r" longOpt="release-manifest" hasArgs="true" required="true" description="The manifest name (release manifest)">
        <arg>manifest-name</arg>
      </option>
      <option opt="d" longOpt="development-manifest" hasArgs="true" required="false" description="The manifest name (development manifest)">
        <arg>manifest-name</arg>
      </option>
      <option opt="l" longOpt="load-manifest" hasArgs="false" required="false" description="Load the release manifest."/>
      <option opt="o" longOpt="overwrite" hasArgs="false" required="false" description="Force overwrite of the manifest file."/>
      <option opt="u" longOpt="use-latest-promoted-version" hasArgs="false" required="false" description="Use the latest promoted versions of the modules before creating the release manifest."/>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.CreateRelease</classname>
    <help lang="en">
      Creates a release manifest.
    </help>
  </command>


  <command name="package-module" alias="pam">
    <description lang="en">todo Something.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
      <option opt="n" longOpt="no-test" hasArgs="false" required="false" description="Do not run the unit-tests."/>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.PackageModule</classname>
    <help lang="en">
      Packages a module. When a module has not been built, it will be built, then packaged.
    </help>
  </command>


  <command name="start-work" alias="start">
    <description lang="en">todo Something.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.cli.cmd.StartWorkImpl</classname>
    <help lang="en"/>
  </command>


  <command name="stop-work" alias="stop">
    <description lang="en">todo Something.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.cli.cmd.StopWorkImpl</classname>
    <help lang="en"/>
  </command>


  <command name="build-module" alias="bm">
    <description lang="en">todo Something.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.BuildModule</classname>
    <help lang="en"/>
  </command>


  <command name="build-all-modules" alias="bam">
    <description lang="en">todo Something.</description>

    <classname>nl.toolforge.karma.core.cmd.impl.BuildAllModules</classname>
    <help lang="en"/>
  </command>


  <command name="test-module" alias="tm">
    <description lang="en">Runs the module's unit tests.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.TestModule</classname>
    <help lang="en"/>
  </command>


  <command name="test-all-modules" alias="tam">
    <description lang="en">Test all modules.</description>
    <classname>nl.toolforge.karma.core.cmd.impl.TestAllModules</classname>
    <help lang="en"/>
  </command>


  <command name="generate-test-report" alias="gtr">
    <description lang="en">Generate a test report.</description>
    <classname>nl.toolforge.karma.core.cmd.impl.GenerateTestReport</classname>
    <help lang="en"/>
  </command>


  <command name="doc-module" alias="dm">
    <description lang="en">Generate the module's API documentation.</description>
    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>
    <classname>nl.toolforge.karma.core.cmd.impl.DocModule</classname>
    <help lang="en">
       Runs javadoc for a module.
    </help>
  </command>


  <command name="doc-all-modules" alias="dam">
    <description lang="en">Generate API documentation for all modules.</description>
    <classname>nl.toolforge.karma.core.cmd.impl.DocAllModules</classname>
    <help lang="en"/>
  </command>


  <command name="clean-module" alias="clm">
    <description lang="en">Removes the module's built artifacts.</description>
    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>
    <classname>nl.toolforge.karma.core.cmd.impl.CleanModule</classname>
    <help lang="en"/>
  </command>


  <command name="clean-all-modules" alias="clam">
    <description lang="en">Removes all built artifacts.</description>
    <classname>nl.toolforge.karma.core.cmd.impl.CleanAll</classname>
    <help lang="en">
      Cleans all modules in the manifest. Cleaning means that the build artifacts for all modules will be removed.
    </help>
  </command>


  <command name="update-module" alias="um">
    <description lang="en">Update a module from the vcs.</description>
    <options>
      <option opt="m" longOpt="module-name" hasArgs="true" required="true" description="The module name that should be updated">
        <arg>module-name</arg>
      </option>
      <option opt="v" longOpt="version" hasArgs="true" required="false" description="A specific version">
        <arg>version-number</arg>
      </option>
    </options>
    <classname>nl.toolforge.karma.cli.cmd.UpdateModuleImpl</classname>
    <help lang="en">
			The update command updates a module on a developer's local disk. Optionally, a version-number
			can be provided, to update to a specific version. The version-number must comply to the pattern
			rules for version numbers as defined by ...
    </help>
  </command>

  <command name="update-all-modules" alias="uam">
    <description lang="en">Updates all modules of the active manifest.</description>
    <classname>nl.toolforge.karma.cli.cmd.UpdateAllModulesImpl</classname>
    <help lang="en"/>
  </command>


  <command name="view-manifest" alias="vm dir ls">
    <description lang="en">Views the active manifest.</description>
    <classname>nl.toolforge.karma.cli.cmd.ViewManifestImpl</classname>
    <help lang="en">
			This command shows the status of the current manifest.
    </help>
  </command>


  <command name="view-module-history" alias="vmh">
    <description lang="en">Shows the module's history.</description>
    <classname>nl.toolforge.karma.core.cmd.impl.ViewModuleHistory</classname>
    <help lang="en"/>
  </command>


  <command name="create-module" alias="crm">
    <description lang="en">Creates a module.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
      <option opt="l" longOpt="location" hasArgs="true" required="true" description="The location alias">
        <arg>location-alias</arg>
      </option>
      <option opt="c" longOpt="comment" hasArgs="true" required="true" description="The developer's comment">
        <arg>comment</arg>
      </option>
      <option opt="t" longOpt="type" hasArgs="true" required="true" description="Type of the module (see documentation!)">
        <arg>module-type</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.CreateModuleCommand</classname>
    <help lang="en">
			This command adds a module to a version control system.
    </help>
  </command>


  <command name="promote-module" alias="prm">

    <description lang="en">Promotes a module to the next version.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
      <option opt="c" longOpt="comment" hasArgs="true" required="true" description="The developer's comment">
        <arg>comment</arg>
      </option>
      <option opt="v" longOpt="version" hasArgs="true" required="false" description="The new version number for the module">
        <arg>new-version</arg>
      </option>
      <option opt="f" longOpt="force" hasArgs="false" required="false" description="Promote with uncommitted work as well"/>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.PromoteCommand</classname>

    <help lang="en">
      Promoting a module is
    </help>

  </command>


  <command name="select-manifest" alias="slm">

    <description lang="en">Activates the given manifest.</description>

    <options>
      <option opt="m" longOpt="manifest" hasArgs="true" required="true" description="The manifest name">
        <arg>manifest-name</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.cli.cmd.SelectManifestImpl</classname>

    <help lang="en">

    </help>
  </command>


  <command name="list-manifests" alias="lm">

    <description>Shows all manifests.</description>

    <classname>nl.toolforge.karma.cli.cmd.ListManifestsImpl</classname>

    <help lang="en">
			There is a central repository (generally maintained in a version control system), which contains all the
			available manifests. This repository is configured in the builder.properties file. There
			can be only one such a repository configured in the builder. With the update-manifests command manifests
			are downloaded from the manifest repository and put on the local file system. The list-manifests command
			lists these local manifests. Only these manifests are available for the Karma runtime.
    </help>

  </command>

  <command name="quit" alias="q exit bye later mzl :wq :q">

    <description lang="en">Exit the great Karma environment.</description>

    <classname>nl.toolforge.karma.cli.cmd.ExitCleanImpl</classname>

    <help lang="en">
      Quits Karma. You don't want to, but sometimes you have to (it's just like Windows).
    </help>

  </command>

  <command name="help" alias="?">
    <description lang="en">Karma Guru</description>
    <options>
      <option opt="c" longOpt="command-name" hasArgs="true" required="false" description="The command name">
        <arg>command-name</arg>
      </option>
    </options>
    <classname>nl.toolforge.karma.cli.cmd.HelpImpl</classname>
    <help lang="en">
      Shows help information, either for all commands or for one command.
    </help>
  </command>

</commands>

