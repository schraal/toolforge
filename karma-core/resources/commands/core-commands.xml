<?xml version="1.0"?>

<!-- TODO description element should get childs for all languages iso attributes -->

<commands>


  <command name="create-release-manifest" alias="cr">
    <description lang="en">Creates a release manifest.</description>

    <options>
      <option opt="r" longOpt="release-manifest" hasArgs="true" required="true" description="The manifest name (release manifest)">
        <arg>manifest-name</arg>
      </option>
      <option opt="d" longOpt="development-manifest" hasArgs="true" required="false" description="The manifest name (development manifest)">
        <arg>manifest-name</arg>
      </option>
      <option opt="l" longOpt="load-manifest" hasArgs="false" required="false" description="Load the release manifest."/>
      <option opt="o" longOpt="overwrite" hasArgs="false" required="false" description="Force overwrite of the manifest file."/>
      <option opt="u" longOpt="use-latest-promoted-version" hasArgs="false" required="false" description="Use the latest promoted versions of the modules before creating the release manifest."/>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.CreateRelease</classname>
    <help lang="en">
      Creates a release manifest.
    </help>
  </command>



  <command name="package-module" alias="pam">
    <description lang="en">Packages a module into an artifact (jar, ear, war, dll, etc).</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
      <option opt="n" longOpt="no-test" hasArgs="false" required="false" description="Do not run the unit-tests."/>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.PackageModule</classname>
    <help lang="en">
      Packages a module. Depending on a modules' type, it will create the correct package. When a module
      has not been built, it will be built, then packaged.
    </help>
  </command>


  <command name="build-module" alias="bm">
    <description lang="en">Builds a module, i.e. compiles its source code.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
      <option opt="n" longOpt="no-recurse" hasArgs="false" required="false" description="Do not recursively build dependencies."/>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.BuildModule</classname>
    <help lang="en"/>
  </command>



  <command name="build-all-modules" alias="bam">
    <description lang="en">Builds all modules.</description>

    <classname>nl.toolforge.karma.core.cmd.impl.BuildAllModules</classname>
    <help lang="en"/>
  </command>


  <command name="test-module" alias="tm">
    <description lang="en">Runs the module's unit tests.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
      <option opt="n" longOpt="no-recurse" hasArgs="false" required="false" description="Do not recursively test or build dependencies."/>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.TestModule</classname>
    <help lang="en"/>
  </command>


  <command name="test-all-modules" alias="tam">
    <description lang="en">Test all modules.</description>
    <classname>nl.toolforge.karma.core.cmd.impl.TestAllModules</classname>
    <help lang="en"/>
  </command>


  <command name="generate-test-report" alias="gtr">
    <description lang="en">Generate a test report.</description>
    <classname>nl.toolforge.karma.core.cmd.impl.GenerateTestReport</classname>
    <help lang="en"/>
  </command>


  <command name="doc-module" alias="dm">
    <description lang="en">Generate the module's Java API documentation.</description>
    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>
    <classname>nl.toolforge.karma.core.cmd.impl.DocModule</classname>
    <help lang="en">
       Runs javadoc for a module.
    </help>
  </command>


  <command name="doc-all-modules" alias="dam">
    <description lang="en">Generate API documentation for all modules.</description>
    <classname>nl.toolforge.karma.core.cmd.impl.DocAllModules</classname>
    <help lang="en"/>
  </command>


  <command name="clean-module" alias="clm">
    <description lang="en">Removes the module's built artifacts.</description>
    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
    </options>
    <classname>nl.toolforge.karma.core.cmd.impl.CleanModule</classname>
    <help lang="en"/>
  </command>


  <command name="clean-all-modules" alias="clam">

    <description lang="en">Removes all built artifacts.</description>

    <classname>nl.toolforge.karma.core.cmd.impl.CleanAll</classname>

    <help lang="en">
      Cleans all modules in the manifest. Cleaning means that the build artifacts for all modules are removed.
    </help>

  </command>



  <command name="create-module" alias="crm">
    <description lang="en">Creates a module in a version control system.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
      <option opt="l" longOpt="location" hasArgs="true" required="true" description="The location alias">
        <arg>location-alias</arg>
      </option>
      <option opt="c" longOpt="comment" hasArgs="true" required="true" description="The developer's comment">
        <arg>comment</arg>
      </option>
      <option opt="t" longOpt="type" hasArgs="true" required="true" description="Type of the module (see documentation!)">
        <arg>module-type</arg>
      </option>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.CreateModuleCommand</classname>

    <help lang="en">
			This command adds a module to a version control system. The module is added to the specified version control
      system and its internal structure is created based on the module types' layout.
    </help>

  </command>


  <command name="promote-module" alias="prm">

    <description lang="en">Promotes a module to the next version.</description>

    <options>
      <option opt="m" longOpt="module" hasArgs="true" required="true" description="The module name">
        <arg>module-name</arg>
      </option>
      <option opt="c" longOpt="comment" hasArgs="true" required="true" description="The developer's comment">
        <arg>comment</arg>
      </option>
      <option opt="v" longOpt="version" hasArgs="true" required="false" description="The new version number for the module">
        <arg>new-version</arg>
      </option>
      <option opt="f" longOpt="force" hasArgs="false" required="false" description="Promote with uncommitted work as well"/>
    </options>

    <classname>nl.toolforge.karma.core.cmd.impl.PromoteCommand</classname>

    <help lang="en">
      Promoting a module is a core feature of Karma's version management. When a module is promoted, it means that
      the developer has labelled the module as 'stable', iso the working copy, which is generally unstable.
    </help>

  </command>


</commands>

