package nl.toolforge.karma.core.cmd;

import nl.toolforge.karma.core.KarmaException;
import nl.toolforge.karma.core.KarmaRuntimeException;
import nl.toolforge.karma.core.test.BaseTest;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;

import java.util.Set;

/**
 * @author D.A. Smedes
 * @version $Id$
 */
public class TestCommandLoader extends BaseTest {

	public void testParse1() {

		CommandLoader cl = CommandLoader.getInstance();

		try {
			Set l = cl.load("test/commands-example.xml");

			assertEquals("There should be two commands loaded from the descriptor file", 2, l.size());

		} catch (KarmaRuntimeException k) {
			k.printStackTrace();
			fail(k.getMessage());
		}
	}

	/**
	 * Tests the <code>org.apache.commons.cli</code> package. This test method is useful as a reference
	 * to how this thing works in the first place.
	 */
	public void testCommandOptions1() {

		Options options = new Options();

		Option option = new Option("m", "module-name", true, "The module name for the command.");
		options.addOption(option);

		CommandLineParser parser = new PosixParser();
		try {
			CommandLine commandLine = parser.parse(options, new String[]{"-m", "AAA"});

			assertEquals("AAA", options.getOption("m").getValue());

		} catch (ParseException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests whether we can query the Options as they have been generated by the <code>CommandLoader.load()</code>-method.
	 */
	public void testCommandOptions2() {

		CommandLoader cl = CommandLoader.getInstance();

		try {
			Set l = cl.load("test/commands-example.xml");

			CommandDescriptor descriptor = null;
			if (l.iterator().hasNext()) {

				// Getting the first. Both test commands have the same options ...
				//
				descriptor = (CommandDescriptor) l.iterator().next();
			} else {
				fail("Expecting at least a few command descriptors here.");
			}

			CommandLineParser parser = new PosixParser();
			parser.parse(descriptor.getOptions(), new String[]{"-m", "BBB"});

			assertEquals("BBB", descriptor.getOptions().getOption("m").getValue());

		} catch (Exception k) {
			k.printStackTrace();
			fail(k.getMessage());
		}

	}


}
