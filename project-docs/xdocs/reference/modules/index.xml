<?xml version="1.0"?>
<document>

  <properties>
    <title>Reference Documentation</title>
  </properties>

  <body>
    <section name="Modules">
      <p>
        The smallest unit that is managed by Karma is a module. A module is
        a directory structure, containing source code, unit tests, documentation,
        configuration and the like.
      </p>
      <subsection name="Module name">
        <p>
          A module name must be composed from the characters:
          <ul>
            <li>A-Z</li>
            <li>a-z</li>
            <li>-</li>
            <li>0-9</li>
          </ul>
          Valid examples are:
          <ul>
            <li>A</li>
            <li>-</li>
            <li>4</li>
            <li>karma-core</li>
            <li>log4j</li>
          </ul>
          <b>Not</b> valid are, e.g.:
          <ul>
            <li>karma_core ('_' is not allowed)</li>
            <li>karma core (' ' is not allowed)</li>
            <li>karma-core! ('!' is not allowed)</li>
          </ul>
        </p>
        </subsection>
        <subsection name="Karma system files">
        <p>
          A module must have a least one file in the root of the module:
          <table>
            <tr>
              <th>File</th>
              <th>Description</th>
            </tr>
            <tr>
              <td>module-descriptor.xml</td>
              <td>
                This file serves two purposes.
                <br/>The first is to specify the type
                of the module. See <a href='#Module_types'>module types</a>.
                <br/>
                The second purpose is that of version storage.
                Speaking in CVS
                terminology: everytime a module is promoted to a higher version,
                a version tag is placed on its files. Karma uses the version tags
                on this file to retrieve the module's available versions. See
                <a href="module-versions.html">module versions</a> for more information.
              </td>
            </tr>
          </table>
          Optional, but important files are:
          <table>
            <tr>
              <th>File</th>
              <th>Description</th>
            </tr>
            <tr>
              <td>history.xml</td>
              <td>
                The history.xml stores all history information of a module. When
                the module is created using Karma a 'module creation' event is
                logged. When promoting a module a 'promote module' event is logged.
                <br/>
                A module's history is used for generating release notes, determining
                whether to upgrade to a newer version of a module, etc.
                <br/>
                 See <a href="module-history.html">module history</a> for more information.
              </td>
            </tr>
            <tr>
              <td>dependencies.xml</td>
              <td>
                A module can have dependencies on other modules and on external libraries.
                These dependencies are used when building, testing or packaging a module.
                See <a href='../configuration-management/dependency-management.html'>
                dependency management</a> for more information.
              </td>
            </tr>
          </table>

        </p>
        </subsection>

      <subsection name="Module creation">
      <p>
        Modules are best created by using the <code>create-module</code> command:
<source>
Usage of `create-module`:
----------------------------
create-module (crm)
   -m, --module &lt;module-name&gt;        The module name
   -c, --comment &lt;comment&gt;           The developers comment
   -t, --type &lt;module-type&gt;          Type of the module (see documentation!)
   -l, --location &lt;location-alias&gt;   The location alias
</source>

        An example is:
<source>
create-module -m karma-core -c "The core of Karma" -t JAVA-SOURCE-MODULE -l karma-sf
</source>

        This command will create a module with the name <code>karma-core</code>
        and type <code>JAVA-SOURCE-MODULE</code> in the location <code>karma-sf</code>.
        This location represents the karma cvs repository on SourceForge, e.g.
        Module creation is logged in the history of a module by means of a module
        creation event. The comment is stored as an attribute of this event.
      </p>
      <p>
        Although not recommended, and much more work, it is possible to create a
        module by hand. Be sure to add all the <a href='#Karma_system_files'>necessary files</a>
        to your module.
      </p>
      </subsection>
      <subsection name="Module types">
      <p>
        Karma knows about six types of modules:
        <table>
          <tr>
            <th>Type</th>
            <th>ID</th>
            <th>Description</th>
          </tr>
          <tr>
            <td><a href='lib-module.html'>Library module</a></td>
            <td>LIBRARY-MODULE</td>
            <td>A module of this type stores libraries (typically 3rd party libraries).
            These libraries are used as dependencies of a module.</td>
          </tr>
          <tr>
            <td><a href='src-module.html'>Java source module</a></td>
            <td>JAVA-SOURCE-MODULE</td>
            <td>A module of this type stores Java source code, the corresponding unit
            tests and configuration data. The result of packaging a module of this type is
            a <code>.jar</code> file.</td>
          </tr>
          <tr>
            <td><a href='app-module.html'>Java application module</a></td>
            <td>N/A</td>
            <td>This module type is not implemented yet (but is intended to in
            version 1.0 of Karma).</td>
          </tr>
          <tr>
            <td><a href='webapp-module.html'>Java web application module</a></td>
            <td>JAVA-WEB-APPLICATION</td>
            <td>A module of this type stores all information that is needed to create
            one Java web application. The result of packaging a module of this type is
            a <code>.war</code> file.</td>
          </tr>
          <tr>
            <td><a href='eapp-module.html'>Java enterprise application module</a></td>
            <td>JAVA-ENTERPRISE-APPLICATION</td>
            <td>A module of this type stores all information that is needed to create
            one Java enterprise application. The result of packaging a module of this type is
            a <code>.ear</code> file.</td>
          </tr>
          <tr>
            <td><a href='other-module.html'>Other module</a></td>
            <td>OTHER-MODULE</td>
            <td>This type of module was introduced for storing files that do not
            belong in a module of one of the above types. The result of packaging a module of this type is
            a <code>.zip</code> file containing a 1-to-1 copy of all files in the
            module, except the Karma system files.</td>
          </tr>
        </table>
      </p>
      <p>
        The type of a module is stored in the module's <code>module-descriptor.xml</code>.
        The following descriptor is generated as a result of the <code>create-module</code>
        command issued above:

<source>
<![CDATA[
<?xml version="1.0"?>
<module-descriptor version="1-0">
  <type>JAVA-SOURCE-MODULE</type>
  <layout-specification/> <!-- for future usage -->
</module-descriptor>
]]>
</source>

      </p>
      </subsection>
    </section>
 </body>
</document>
